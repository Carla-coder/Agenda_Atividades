https://websim.ai//@enchantingaurora80704357/tarefaspronta-gerenciador-de-tarefas-pessoais-e-pr/

<html><head><base href="https://tarefaspronta.com.br/">
<title>TarefasPronta - Gerenciador de Tarefas Pessoais e Profissionais</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
<script src="https://unpkg.com/react@17/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.3.2/socket.io.js"></script>
<style>
  body {
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f0f2f5;
    color: #333;
  }
  #root {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }
  .header {
    background-color: #4a90e2;
    color: white;
    padding: 20px;
    text-align: center;
    border-radius: 8px 8px 0 0;
  }
  .task-form {
    background-color: white;
    padding: 20px;
    border-radius: 0 0 8px 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 20px;
  }
  .task-list {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  .task-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px 0;
    border-bottom: 1px solid #eee;
  }
  .task-item:last-child {
    border-bottom: none;
  }
  .btn {
    background-color: #4a90e2;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  .btn:hover {
    background-color: #3a7bc8;
  }
  input[type="text"], select {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  .priority-high {
    color: #e74c3c;
  }
  .priority-medium {
    color: #f39c12;
  }
  .priority-low {
    color: #2ecc71;
  }
  .completed {
    text-decoration: line-through;
    opacity: 0.6;
  }
</style>
</head>
<body>
<div id="root"></div>

<script type="text/babel">
const { useState, useEffect } = React;

// Simulando conexão com Socket.io para sincronização em tempo real
const socket = io('https://tarefaspronta.com.br');

function App() {
  const [tarefas, setTarefas] = useState([]);
  const [novaTarefa, setNovaTarefa] = useState({ titulo: '', prioridade: 'media' });

  useEffect(() => {
    // Simular carregamento inicial de tarefas
    setTarefas([
      { id: 1, titulo: 'Preparar apresentação', prioridade: 'alta', concluida: false },
      { id: 2, titulo: 'Fazer compras', prioridade: 'media', concluida: false },
      { id: 3, titulo: 'Ler livro', prioridade: 'baixa', concluida: true },
    ]);

    // Ouvir atualizações em tempo real
    socket.on('atualizacaoTarefa', (tarefaAtualizada) => {
      setTarefas(tarefasAnteriores => 
        tarefasAnteriores.map(tarefa => 
          tarefa.id === tarefaAtualizada.id ? tarefaAtualizada : tarefa
        )
      );
    });

    return () => {
      socket.off('atualizacaoTarefa');
    };
  }, []);

  const adicionarTarefa = () => {
    if (novaTarefa.titulo) {
      const novaTarefaObj = {
        id: Date.now(),
        ...novaTarefa,
        concluida: false
      };
      setTarefas([...tarefas, novaTarefaObj]);
      setNovaTarefa({ titulo: '', prioridade: 'media' });
      // Simular envio para o backend
      socket.emit('novaTarefa', novaTarefaObj);
    }
  };

  const alternarConclusao = (id) => {
    setTarefas(tarefas.map(tarefa => 
      tarefa.id === id ? { ...tarefa, concluida: !tarefa.concluida } : tarefa
    ));
    // Simular sincronização
    socket.emit('atualizarTarefa', { id, concluida: !tarefas.find(t => t.id === id).concluida });
  };

  const classePrioridade = (prioridade) => {
    switch(prioridade) {
      case 'alta': return 'priority-high';
      case 'media': return 'priority-medium';
      case 'baixa': return 'priority-low';
      default: return '';
    }
  };

  return (
    <div>
      <header className="header">
        <h1>TarefasPronta</h1>
      </header>
      <div className="task-form">
        <input 
          type="text" 
          placeholder="Nova tarefa"
          value={novaTarefa.titulo}
          onChange={(e) => setNovaTarefa({...novaTarefa, titulo: e.target.value})}
        />
        <select 
          value={novaTarefa.prioridade}
          onChange={(e) => setNovaTarefa({...novaTarefa, prioridade: e.target.value})}
        >
          <option value="baixa">Baixa</option>
          <option value="media">Média</option>
          <option value="alta">Alta</option>
        </select>
        <button className="btn" onClick={adicionarTarefa}>Adicionar Tarefa</button>
      </div>
      <div className="task-list">
        <h2>Minhas Tarefas</h2>
        {tarefas.map(tarefa => (
          <div key={tarefa.id} className={`task-item ${tarefa.concluida ? 'completed' : ''}`}>
            <span className={classePrioridade(tarefa.prioridade)}>
              {tarefa.titulo}
            </span>
            <button className="btn" onClick={() => alternarConclusao(tarefa.id)}>
              {tarefa.concluida ? 'Desfazer' : 'Concluir'}
            </button>
          </div>
        ))}
      </div>
    </div>
  );
}

ReactDOM.render(<App />, document.getElementById('root'));
</script>

<script>
// Aqui normalmente iria o código do backend Node.js
// Para este exemplo, vamos apenas comentar a estrutura

/*
Estrutura do Backend (Node.js com Express e MongoDB):

1. Configurar servidor Express
2. Configurar conexão MongoDB
3. Configurar Socket.io para sincronização em tempo real
4. Criar modelo de Tarefa:
   {
     id: String,
     titulo: String,
     prioridade: String,
     concluida: Boolean,
     criadoEm: Date
   }
5. Criar rotas da API:
   - GET /api/tarefas - Listar todas as tarefas
   - POST /api/tarefas - Criar nova tarefa
   - PUT /api/tarefas/:id - Atualizar tarefa (marcar como concluída/não concluída)
   - DELETE /api/tarefas/:id - Remover tarefa

6. Implementar lógica de Socket.io:
   - Emitir 'atualizacaoTarefa' quando uma tarefa for atualizada
   - Ouvir por 'novaTarefa' e 'atualizarTarefa' dos clientes

7. Exemplo de código:

const express = require('express');
const mongoose = require('mongoose');
const http = require('http');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

mongoose.connect('mongodb://localhost/tarefaspronta', { useNewUrlParser: true, useUnifiedTopology: true });

const Tarefa = mongoose.model('Tarefa', {
  titulo: String,
  prioridade: String,
  concluida: Boolean,
  criadoEm: Date
});

io.on('connection', (socket) => {
  console.log('Novo cliente conectado');

  socket.on('novaTarefa', async (tarefa) => {
    const novaTarefa = new Tarefa(tarefa);
    await novaTarefa.save();
    io.emit('atualizacaoTarefa', novaTarefa);
  });

  socket.on('atualizarTarefa', async ({ id, concluida }) => {
    const tarefaAtualizada = await Tarefa.findByIdAndUpdate(id, { concluida }, { new: true });
    io.emit('atualizacaoTarefa', tarefaAtualizada);
  });
});

app.use(express.json());

app.get('/api/tarefas', async (req, res) => {
  const tarefas = await Tarefa.find();
  res.json(tarefas);
});

// Adicionar outras rotas aqui

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`Servidor rodando na porta ${PORT}`));
*/
</script>

</body></html>

https://websim.ai//@enchantingaurora80704357/gerenciapro-gerenciamento-de-projetos-colaborativo/

<html><head><base href="https://gerenciadorprojetos.com.br/">
<title>GerenciaPro - Gerenciamento de Projetos Colaborativo</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
<script src="https://unpkg.com/react@17/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
<style>
  body {
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f0f2f5;
  }
  #root {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }
  .header {
    background-color: #2c3e50;
    color: white;
    padding: 20px;
    text-align: center;
  }
  .main-content {
    display: flex;
    margin-top: 20px;
  }
  .sidebar {
    width: 250px;
    background-color: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
  }
  .content {
    flex-grow: 1;
    margin-left: 20px;
    background-color: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
  }
  .btn {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  .btn:hover {
    background-color: #2980b9;
  }
  .task-list {
    list-style-type: none;
    padding: 0;
  }
  .task-item {
    background-color: #ecf0f1;
    margin-bottom: 10px;
    padding: 15px;
    border-radius: 5px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .progress-bar {
    width: 100%;
    background-color: #e0e0e0;
    border-radius: 5px;
    margin-top: 10px;
  }
  .progress {
    height: 10px;
    background-color: #2ecc71;
    border-radius: 5px;
    transition: width 0.5s ease-in-out;
  }
</style>
</head>
<body>
<div id="root"></div>

<script type="text/babel">
const { useState, useEffect } = React;

// Dados simulados (substituir por chamadas de API reais em uma aplicação real)
const tarefasIniciais = [
  { id: 1, titulo: 'Criar mockups', atribuidoPara: 'Alice', progresso: 75 },
  { id: 2, titulo: 'Implementar API backend', atribuidoPara: 'Bob', progresso: 30 },
  { id: 3, titulo: 'Escrever testes unitários', atribuidoPara: 'Charlie', progresso: 0 },
];

const membrosIniciais = ['Alice', 'Bob', 'Charlie', 'David'];

function App() {
  const [tarefas, setTarefas] = useState(tarefasIniciais);
  const [membros, setMembros] = useState(membrosIniciais);
  const [novaTarefa, setNovaTarefa] = useState({ titulo: '', atribuidoPara: '' });

  const adicionarTarefa = () => {
    if (novaTarefa.titulo && novaTarefa.atribuidoPara) {
      setTarefas([...tarefas, { ...novaTarefa, id: tarefas.length + 1, progresso: 0 }]);
      setNovaTarefa({ titulo: '', atribuidoPara: '' });
    }
  };

  const atualizarProgresso = (id, novoProgresso) => {
    setTarefas(tarefas.map(tarefa => 
      tarefa.id === id ? { ...tarefa, progresso: novoProgresso } : tarefa
    ));
  };

  return (
    <div>
      <header className="header">
        <h1>GerenciaPro</h1>
      </header>
      <div className="main-content">
        <aside className="sidebar">
          <h2>Membros da Equipe</h2>
          <ul>
            {membros.map(membro => (
              <li key={membro}>{membro}</li>
            ))}
          </ul>
        </aside>
        <main className="content">
          <h2>Tarefas</h2>
          <div>
            <input 
              type="text" 
              placeholder="Título da nova tarefa"
              value={novaTarefa.titulo}
              onChange={(e) => setNovaTarefa({...novaTarefa, titulo: e.target.value})}
            />
            <select 
              value={novaTarefa.atribuidoPara}
              onChange={(e) => setNovaTarefa({...novaTarefa, atribuidoPara: e.target.value})}
            >
              <option value="">Atribuir para...</option>
              {membros.map(membro => (
                <option key={membro} value={membro}>{membro}</option>
              ))}
            </select>
            <button className="btn" onClick={adicionarTarefa}>Adicionar Tarefa</button>
          </div>
          <ul className="task-list">
            {tarefas.map(tarefa => (
              <li key={tarefa.id} className="task-item">
                <div>
                  <h3>{tarefa.titulo}</h3>
                  <p>Atribuído para: {tarefa.atribuidoPara}</p>
                  <div className="progress-bar">
                    <div className="progress" style={{width: `${tarefa.progresso}%`}}></div>
                  </div>
                </div>
                <input 
                  type="range" 
                  min="0" 
                  max="100" 
                  value={tarefa.progresso}
                  onChange={(e) => atualizarProgresso(tarefa.id, parseInt(e.target.value))}
                />
              </li>
            ))}
          </ul>
        </main>
      </div>
    </div>
  );
}

ReactDOM.render(<App />, document.getElementById('root'));
</script>

<script>
// Aqui é onde você normalmente incluiria seu código backend Node.js
// Para este exemplo, vamos apenas adicionar um comentário explicando a estrutura

/*
Estrutura do Backend (Node.js com Express):

1. Configurar servidor Express
2. Configurar conexão MySQL/MariaDB
3. Criar endpoints da API:
   - GET /api/tarefas - Recuperar todas as tarefas
   - POST /api/tarefas - Criar uma nova tarefa
   - PUT /api/tarefas/:id - Atualizar uma tarefa (incluindo progresso)
   - GET /api/membros - Recuperar todos os membros da equipe
   - POST /api/membros - Adicionar um novo membro à equipe

4. Implementar consultas ao banco de dados para cada endpoint
5. Adicionar tratamento de erros e validação de entrada
6. Implementar autenticação e autorização (não mostrado neste exemplo)

Exemplo de trecho de código Node.js:

const express = require('express');
const mysql = require('mysql2');
const app = express();

const db = mysql.createConnection({
  host: 'localhost',
  user: 'seu_usuario',
  password: 'sua_senha',
  database: 'gerenciamento_projetos'
});

db.connect((err) => {
  if (err) throw err;
  console.log('Conectado ao banco de dados');
});

app.use(express.json());

app.get('/api/tarefas', (req, res) => {
  db.query('SELECT * FROM tarefas', (err, resultados) => {
    if (err) throw err;
    res.json(resultados);
  });
});

// Adicione mais endpoints aqui

const PORTA = process.env.PORT || 3000;
app.listen(PORTA, () => console.log(`Servidor rodando na porta ${PORTA}`));
*/
</script>

</body></html>

________________________________________________________________________________________________________________

<!-- <html>
  <head>
    <base href="https://tarefaspronta.com.br/">
    <title>TarefasPronta - Gerenciador de Tarefas Pessoais e Profissionais</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.3.2/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <style>
      body {
        font-family: 'Roboto', sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f0f2f5;
        color: #333;
      }
      #root {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }
      .header {
        background-color: #4a90e2;
        color: white;
        padding: 20px;
        text-align: center;
        border-radius: 8px 8px 0 0;
      }
      .task-form {
        background-color: white;
        padding: 20px;
        border-radius: 0 0 8px 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 20px;
      }
      .task-list {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        min-height: 100px;
      }
      .task-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px;
        border: 1px solid #eee;
        margin-bottom: 8px;
        border-radius: 4px;
        background-color: white;
        cursor: move;
        transition: all 0.3s ease;
      }
      .task-item:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      }
      .task-item.sortable-ghost {
        opacity: 0.4;
        background-color: #f8f9fa;
      }
      .btn {
        background-color: #4a90e2;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
      }
      .btn:hover {
        background-color: #3a7bc8;
      }
      input[type="text"], select {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      .priority-high {
        color: #e74c3c;
        font-weight: bold;
      }
      .priority-medium {
        color: #f39c12;
      }
      .priority-low {
        color: #2ecc71;
      }
      .completed {
        text-decoration: line-through;
        opacity: 0.6;
      }
      .task-drag-handle {
        cursor: move;
        padding: 0 10px;
        color: #999;
      }
      .task-actions {
        display: flex;
        gap: 10px;
      }
      .task-edit-input {
        width: 80%;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
    </style>
  </head>
  <body>
    <div id="root"></div>

    <script type="text/babel">
      const { useState, useEffect, useRef } = React;

      function App() {
        const [tarefas, setTarefas] = useState([]);
        const [novaTarefa, setNovaTarefa] = useState({ titulo: '', prioridade: 'media' });
        const tarefasListRef = useRef(null);

        useEffect(() => {
          // Carregar tarefas do localStorage
          const tarefasSalvas = localStorage.getItem('tarefas');
          if (tarefasSalvas) {
            setTarefas(JSON.parse(tarefasSalvas));
          }

          // Configurar Sortable
          if (tarefasListRef.current) {
            new Sortable(tarefasListRef.current, {
              animation: 150,
              handle: '.task-drag-handle',
              onEnd: (evt) => {
                const tarefasAtualizadas = Array.from(tarefasListRef.current.children).map(el => {
                  const id = parseInt(el.getAttribute('data-id'));
                  return tarefas.find(t => t.id === id);
                });
                setTarefas(tarefasAtualizadas);
                localStorage.setItem('tarefas', JSON.stringify(tarefasAtualizadas));
              }
            });
          }
        }, []);

        useEffect(() => {
          // Salvar tarefas no localStorage quando houver mudanças
          localStorage.setItem('tarefas', JSON.stringify(tarefas));
        }, [tarefas]);

        const adicionarTarefa = () => {
          if (novaTarefa.titulo) {
            const novaTarefaObj = {
              id: Date.now(),
              ...novaTarefa,
              concluida: false,
              emEdicao: false
            };
            setTarefas([...tarefas, novaTarefaObj]);
            setNovaTarefa({ titulo: '', prioridade: 'media' });
          }
        };

        const alternarConclusao = (id) => {
          setTarefas(tarefas.map(tarefa => 
            tarefa.id === id ? { ...tarefa, concluida: !tarefa.concluida } : tarefa
          ));
        };

        const removerTarefa = (id) => {
          setTarefas(tarefas.filter(tarefa => tarefa.id !== id));
        };

        const editarTarefa = (id) => {
          setTarefas(tarefas.map(tarefa => 
            tarefa.id === id ? { ...tarefa, emEdicao: true } : tarefa
          ));
        };

        const salvarEdicao = (id, novoTitulo) => {
          setTarefas(tarefas.map(tarefa => 
            tarefa.id === id ? { ...tarefa, titulo: novoTitulo, emEdicao: false } : tarefa
          ));
        };

        const classePrioridade = (prioridade) => {
          switch(prioridade) {
            case 'alta': return 'priority-high';
            case 'media': return 'priority-medium';
            case 'baixa': return 'priority-low';
            default: return '';
          }
        };

        return (
          <div>
            <header className="header">
              <h1>TarefasPronta</h1>
              <p>Arraste e solte para reordenar as tarefas</p>
            </header>
            <div className="task-form">
              <input 
                type="text" 
                placeholder="Nova tarefa"
                value={novaTarefa.titulo}
                onChange={(e) => setNovaTarefa({...novaTarefa, titulo: e.target.value})}
                onKeyPress={(e) => e.key === 'Enter' && adicionarTarefa()}
              />
              <select 
                value={novaTarefa.prioridade}
                onChange={(e) => setNovaTarefa({...novaTarefa, prioridade: e.target.value})}
              >
                <option value="baixa">Baixa</option>
                <option value="media">Média</option>
                <option value="alta">Alta</option>
              </select>
              <button className="btn" onClick={adicionarTarefa}>Adicionar Tarefa</button>
            </div>
            <div className="task-list">
              <h2>Minhas Tarefas</h2>
              <div ref={tarefasListRef}>
                {tarefas.map(tarefa => (
                  <div 
                    key={tarefa.id} 
                    data-id={tarefa.id}
                    className={`task-item ${tarefa.concluida ? 'completed' : ''}`}
                  >
                    <span className="task-drag-handle">☰</span>
                    {tarefa.emEdicao ? (
                      <input 
                        type="text" 
                        className="task-edit-input"
                        defaultValue={tarefa.titulo}
                        onBlur={(e) => salvarEdicao(tarefa.id, e.target.value)}
                      />
                    ) : (
                      <span className={classePrioridade(tarefa.prioridade)}>
                        {tarefa.titulo}
                      </span>
                    )}
                    <div className="task-actions">
                      <button className="btn" onClick={() => alternarConclusao(tarefa.id)}>
                        {tarefa.concluida ? 'Desfazer' : 'Concluir'}
                      </button>
                      <button className="btn" onClick={() => removerTarefa(tarefa.id)}>
                        Remover
                      </button>
                      <button className="btn" onClick={() => editarTarefa(tarefa.id)}>
                        Editar
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );
      }

      ReactDOM.render(<App />, document.getElementById('root'));
    </script>
  </body>
</html> -->